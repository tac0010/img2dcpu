img2dcpu - A utility for converting an image into DCPU assembly code for 0x10c.
  
--- Copyright ---
Copyright 2012 Tyler Crumpton.
This utility is licensed under a GPLv3 License (see COPYING).
Source at: https://github.com/tac0010/img2dcpu
  
--- Release Information ---
April 20, 2012 - v0.6: Added cross-platform support, fixed 32x24 animation.
April 19, 2012 - v0.5: Added animation support to all three resolutions.
April 17, 2012 - v0.4: Added support for 64x64 centered images.
April 16, 2012 - v0.3: Added support for high-resolution images.
April 15, 2012 - v0.2: Added support for full color images.
April 13, 2012 - v0.1: Initial Release. Only works with 24-bit bitmaps.
 
--- Description ---
img2dcpu allows you to convert a color bitmap image into code that can be used 
to display the image on the DCPU in Mojang's new space game, 0x10c. Currently, 
the specification of the IO system in 0x10c allows for a 32x12-tile screen,
where each tile consists of a 4x8 character. img2dcpu can create assembly code
that can display a 32x24 color or 64x48/64x64 black and white image on the DCPU 
screen by making use of custom fonts, splitting each tile into smaller square 
pixels. img2dcpu can also generate short animations in each of the supported
resolutions. Future work includes decreasing the final output in order to 
decrease the amount of DCPU that is used.

--- Usage ---
> img2dcpu [imagefilename] [outputfilename]

imagefilename   The filename of the bitmap image that is to be converted.
outputfilename  The filename of the text file that will contain the DCPU code.

In order to generate an animation, you must input an image contains all frames,
in order, from left to right. Each frame must have a resolution supported by
img2dcpu. See the /examples folder for some sample images.

If no arguments are provided, the help message will be displayed.

--- Limitations ---
As of v0.6, img2dcpu can only convert from a 32x24 or 64x48/64x64 24-bit color BMP 
images, but the 64x48 and 64x64 images will be converted to black and white. 64x64
images will not fill up the screen, but will instead be centered in the DCPU window.
Future releases may include other image types and resolutions.

--- Special Thanks ---
Special thanks goes to Christopher Brown for contributing his code for Linux and 
Mac OSX!

--- Contribution ---
I hope you can find this work useful, and if you would like to contribute
to the developer of this utility, you may send any amount of Bitcoins to this
address: 

	1CP3VCAE8wvS6muwyn98PLLVYafqdNCAAH

Any amount is appreciated! (more info on Bitcoins at http://bitcoin.org/ )